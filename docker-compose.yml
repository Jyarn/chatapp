services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 5s
      timeout: 60s
      retries: 1
    develop:
      watch:
      - action: sync+restart
        path: ./backend
        target: ./
        ignore:
          - node_modules/
          - tests/
          - Dockerfile/
          - package*.json
      - action: rebuild
        path: ./backend
        target: ./
        ignore:
          - node_modules/
          - routers/
          - tests/
          - app.js
          - db.js
          - middleware.js
          - utils.js

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    ports:
      - 4200:4200
    depends_on:
      backend:
        condition: service_healthy
